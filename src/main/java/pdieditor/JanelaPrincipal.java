/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package pdieditor;

import com.sun.media.jai.widget.DisplayJAI;
import java.io.File;
import java.util.ArrayList;
import javax.media.jai.Histogram;
import javax.media.jai.JAI;
import javax.media.jai.PlanarImage;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;


/**
 *
 * @author Caio
 */
public class JanelaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form JanelaPrincipal
     */
    public JanelaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        barra = new javax.swing.JScrollPane();
        displayImagem = new com.sun.media.jai.widget.DisplayJAI();
        deslizanteZoom = new javax.swing.JSlider();
        textoZoom = new javax.swing.JLabel();
        nivelZoom = new javax.swing.JLabel();
        menu = new javax.swing.JMenuBar();
        arquivo = new javax.swing.JMenu();
        abrir = new javax.swing.JMenuItem();
        salvar = new javax.swing.JMenuItem();
        salvarComo = new javax.swing.JMenuItem();
        Sair = new javax.swing.JMenuItem();
        editar = new javax.swing.JMenu();
        desfazer = new javax.swing.JMenuItem();
        refazer = new javax.swing.JMenuItem();
        paraCinza = new javax.swing.JMenuItem();
        filtros = new javax.swing.JMenu();
        media = new javax.swing.JMenuItem();
        mediana = new javax.swing.JMenuItem();
        gaussiano = new javax.swing.JMenuItem();
        laplace = new javax.swing.JMenuItem();
        ferramentas = new javax.swing.JMenu();
        histogram = new javax.swing.JMenuItem();
        segmentar = new javax.swing.JMenuItem();
        waterShed = new javax.swing.JMenuItem();
        propriedades = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        displayImagem.setBackground(new java.awt.Color(255, 255, 255));
        barra.setViewportView(displayImagem);

        deslizanteZoom.setMaximum(800);
        deslizanteZoom.setMinimum(1);
        deslizanteZoom.setValue(100);
        deslizanteZoom.setEnabled(false);
        deslizanteZoom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                deslizanteZoomStateChanged(evt);
            }
        });

        textoZoom.setText("Zoom:");

        nivelZoom.setText("100%");

        arquivo.setText("Arquivo");

        abrir.setText("Abrir");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        arquivo.add(abrir);

        salvar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        salvar.setText("Salvar");
        salvar.setEnabled(false);
        salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarActionPerformed(evt);
            }
        });
        arquivo.add(salvar);

        salvarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        salvarComo.setText("Salvar como...");
        salvarComo.setEnabled(false);
        salvarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salvarComoActionPerformed(evt);
            }
        });
        arquivo.add(salvarComo);

        Sair.setText("Sair");
        Sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SairActionPerformed(evt);
            }
        });
        arquivo.add(Sair);

        menu.add(arquivo);

        editar.setText("Editar");

        desfazer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        desfazer.setText("Desfazer");
        desfazer.setEnabled(false);
        desfazer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                desfazerActionPerformed(evt);
            }
        });
        editar.add(desfazer);

        refazer.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        refazer.setText("Refazer");
        refazer.setEnabled(false);
        refazer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refazerActionPerformed(evt);
            }
        });
        editar.add(refazer);

        paraCinza.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        paraCinza.setText("Escala de Cinza");
        paraCinza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paraCinzaActionPerformed(evt);
            }
        });
        editar.add(paraCinza);

        menu.add(editar);

        filtros.setText("Filtros");

        media.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        media.setText("MÃ©dia");
        media.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediaActionPerformed(evt);
            }
        });
        filtros.add(media);

        mediana.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK));
        mediana.setText("Mediana");
        mediana.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medianaActionPerformed(evt);
            }
        });
        filtros.add(mediana);

        gaussiano.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        gaussiano.setText("Gaussiano");
        gaussiano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gaussianoActionPerformed(evt);
            }
        });
        filtros.add(gaussiano);

        laplace.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_MASK));
        laplace.setText("Laplace");
        laplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laplaceActionPerformed(evt);
            }
        });
        filtros.add(laplace);

        menu.add(filtros);

        ferramentas.setText("Ferramentas");

        histogram.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK));
        histogram.setText("Histograma");
        histogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histogramActionPerformed(evt);
            }
        });
        ferramentas.add(histogram);

        segmentar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        segmentar.setText("Segmentar");
        segmentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                segmentarActionPerformed(evt);
            }
        });
        ferramentas.add(segmentar);

        waterShed.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.ALT_MASK));
        waterShed.setText("WaterShed");
        waterShed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                waterShedActionPerformed(evt);
            }
        });
        ferramentas.add(waterShed);

        propriedades.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_MASK));
        propriedades.setText("Propriedades de cor");
        propriedades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                propriedadesActionPerformed(evt);
            }
        });
        ferramentas.add(propriedades);

        menu.add(ferramentas);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(barra)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(deslizanteZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textoZoom)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nivelZoom)
                .addContainerGap(127, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(barra, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textoZoom)
                        .addComponent(nivelZoom))
                    .addComponent(deslizanteZoom, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        JFileChooser seletor = new JFileChooser();
        int returnVal = seletor.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = seletor.getSelectedFile();
            if(file != null) {
                PlanarImage iv = Util.open(file.getAbsolutePath());
                if(iv != null) {
                    imagens.clear();
                    imagemVisivel = iv;
                    imagens.add(imagemVisivel);
                    zoom = 100;
                    nivelZoom.setText(zoom + "%");
                    deslizanteZoom.setValue(zoom);
                    deslizanteZoom.setEnabled(true);
                    displayImagem.set(imagemVisivel);
                    refazer.setEnabled(false);
                    desfazer.setEnabled(false);
                    salvar.setEnabled(true);
                    salvarComo.setEnabled(true);
                    backup.clear();
                    return;
                }
            }
            JOptionPane.showMessageDialog(this, "O arquivo nÃ£o pÃ´de ser carregado!", "Erro no carregamento", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_abrirActionPerformed

    private void deslizanteZoomStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_deslizanteZoomStateChanged
        zoom = deslizanteZoom.getValue();
        nivelZoom.setText(zoom + "%");
        atualizar();
    }//GEN-LAST:event_deslizanteZoomStateChanged

    private void SairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SairActionPerformed
        System.exit(0);
    }//GEN-LAST:event_SairActionPerformed

    private void paraCinzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paraCinzaActionPerformed
        PlanarImage pi = imagemAtual();
        if(pi == null) {
            JOptionPane.showMessageDialog(this, "Foi impossÃ­vel fazer a operaÃ§Ã£o!", "Erro na imagem", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(pi.getSampleModel().getNumBands() == 1) {
            JOptionPane.showMessageDialog(this, "A imagem jÃ¡ estÃ¡ em escala de cinza!", "Erro na imagem", JOptionPane.ERROR_MESSAGE);
            return;
        }
        PlanarImage ci = Util.grayscale(pi);
        atualizarImagem(ci);
    }//GEN-LAST:event_paraCinzaActionPerformed

    private void refazerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refazerActionPerformed
        if(backup.isEmpty()) {
            return;
        }
        PlanarImage pi = backup.get(0);
        backup.remove(pi);
        imagens.add(pi);
        desfazer.setEnabled(true);
        if(backup.isEmpty()) {
            refazer.setEnabled(false);
        }
        atualizar();
    }//GEN-LAST:event_refazerActionPerformed

    private void desfazerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_desfazerActionPerformed
        if(imagens.size() <= 1) {
            return;
        }
        PlanarImage pi = imagens.get(imagens.size() - 1);
        imagens.remove(pi);
        backup.add(pi);
        refazer.setEnabled(true);
        if(imagens.size() <= 1) {
            desfazer.setEnabled(false);
        }
        atualizar();
    }//GEN-LAST:event_desfazerActionPerformed

    private void gaussianoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gaussianoActionPerformed
        FiltroGaussiano gaussianoJ = new FiltroGaussiano(this);
        gaussianoJ.setVisible(true);
    }//GEN-LAST:event_gaussianoActionPerformed

    private void medianaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medianaActionPerformed
        FiltroMediana medianaJ = new FiltroMediana(this);
        medianaJ.setVisible(true);
    }//GEN-LAST:event_medianaActionPerformed

    private void mediaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediaActionPerformed
        FiltroMedia mediaJ = new FiltroMedia(this);
        mediaJ.setVisible(true);
    }//GEN-LAST:event_mediaActionPerformed

    private void salvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarActionPerformed
        PlanarImage pi = imagemAtual();
        if(pi == null) {
            JOptionPane.showMessageDialog(this, "NÃ£o foi possÃ­vel filtrar a imagem!", "Erro na imagem", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int pos = file.getAbsolutePath().lastIndexOf(".");
        String s = file.getAbsolutePath().substring(0, pos) + ".tif";
        file = new File(s);
        JAI.create("filestore", pi, s);
        JOptionPane.showMessageDialog(this, "A imagem foi salva no tipo TIFF!", "Salvando", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_salvarActionPerformed

    private void salvarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salvarComoActionPerformed
        PlanarImage pi = imagemAtual();
        if(pi == null) {
            JOptionPane.showMessageDialog(this, "NÃ£o foi possÃ­vel filtrar a imagem!", "Erro na imagem", JOptionPane.ERROR_MESSAGE);
            return;
        }
        JFileChooser seletor = new JFileChooser();
        int returnVal = seletor.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file2 = seletor.getSelectedFile();
            int pos = file2.getAbsolutePath().lastIndexOf(".");
            String s = file2.getAbsolutePath().substring(0, pos) + ".tif";
            file = new File(s);
            JAI.create("filestore", pi, s);
            JOptionPane.showMessageDialog(this, "A imagem foi salva no tipo TIFF!", "Salvando", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_salvarComoActionPerformed

    private void laplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laplaceActionPerformed
        PlanarImage pi = imagemAtual();
        if(pi == null) {
            JOptionPane.showMessageDialog(this, "NÃ£o foi possÃ­vel filtrar a imagem!", "Erro na imagem", JOptionPane.ERROR_MESSAGE);
            return;
        }
        PlanarImage fi = Util.laplace(pi);
        atualizarImagem(fi);
    }//GEN-LAST:event_laplaceActionPerformed

    private void histogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histogramActionPerformed
        PlanarImage pi = imagemAtual();
        if(pi == null) {
            JOptionPane.showMessageDialog(this, "Foi impossÃ­vel fazer a operaÃ§Ã£o!", "Erro na imagem", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Histogram h = Util.histograma(pi);
        PlanarImage gi = Util.gerarGrafico(h);
        DisplayJAI display = new DisplayJAI(gi);
        JFrame frame = new JFrame();
        frame.add(display);
        frame.setVisible(true);
        frame.pack();
    }//GEN-LAST:event_histogramActionPerformed

    private void segmentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_segmentarActionPerformed
        if(imagemAtual() == null) {
            JOptionPane.showMessageDialog(this, "Foi impossÃ­vel fazer a operaÃ§Ã£o!", "Erro na imagem", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Segmentacao segmentarJ = new Segmentacao(this);
        segmentarJ.setVisible(true);
    }//GEN-LAST:event_segmentarActionPerformed

    private void waterShedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_waterShedActionPerformed
        PlanarImage pi = imagemAtual();
        if(pi == null) {
            JOptionPane.showMessageDialog(this, "Foi impossÃ­vel fazer a operaÃ§Ã£o!", "Erro na imagem", JOptionPane.ERROR_MESSAGE);
            return;
        }
        PlanarImage wi = Util.watershed(pi);
        atualizarImagem(wi);
    }//GEN-LAST:event_waterShedActionPerformed

    private void propriedadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_propriedadesActionPerformed
        PlanarImage pi = imagemAtual();
        if(pi == null) {
            JOptionPane.showMessageDialog(this, "Foi impossÃ­vel fazer a operaÃ§Ã£o!", "Erro na imagem", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Histogram h = Util.histograma(pi);
        Histogram hc = Util.histogramaCor(pi);
        String tipo;
        int mean = (int)h.getMean()[0];
        if(mean < 85) {
            tipo = "baixa";
        } else if(mean < 170) {
            tipo = "mÃ©dia";
        } else {
            tipo = "alta";
        }
        String s =
                "A imagem possui luminosidade " + tipo + "\n" +
                "Sua cor mÃ©dia dela Ã©: " + (int)hc.getMean()[0] + ", " + (int)hc.getMean()[1] + ", " + (int)hc.getMean()[2] + "\n";
        Propriedades propriedadesJ = new Propriedades(s);
        propriedadesJ.setVisible(true);
    }//GEN-LAST:event_propriedadesActionPerformed
    
    public void atualizarImagem(PlanarImage pi) {
        imagens.add(pi);
        backup.clear();
        desfazer.setEnabled(true);
        refazer.setEnabled(false);
        atualizar();
    }
    
    public PlanarImage imagemAtual() {
        if(imagens.isEmpty()) {
            return null;
        }
        return imagens.get(imagens.size() - 1);
    }
    
    private void atualizar() {
        if(imagens.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Foi impossÃ­vel fazer a operaÃ§Ã£o!", "Erro na imagem", JOptionPane.ERROR_MESSAGE);
            return;
        }
        PlanarImage pi = imagens.get(imagens.size() - 1);
        if(pi == null) {
            JOptionPane.showMessageDialog(this, "Foi impossÃ­vel fazer a operaÃ§Ã£o!", "Erro na imagem", JOptionPane.ERROR_MESSAGE);
            return;
        }
	imagemVisivel = Util.resize(pi, zoom);
        displayImagem.set(imagemVisivel);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JanelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
			new JanelaPrincipal().setVisible(true);
		});
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Sair;
    private javax.swing.JMenuItem abrir;
    private javax.swing.JMenu arquivo;
    private javax.swing.JScrollPane barra;
    private javax.swing.JMenuItem desfazer;
    private javax.swing.JSlider deslizanteZoom;
    private com.sun.media.jai.widget.DisplayJAI displayImagem;
    private javax.swing.JMenu editar;
    private javax.swing.JMenu ferramentas;
    private javax.swing.JMenu filtros;
    private javax.swing.JMenuItem gaussiano;
    private javax.swing.JMenuItem histogram;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JMenuItem laplace;
    private javax.swing.JMenuItem media;
    private javax.swing.JMenuItem mediana;
    private javax.swing.JMenuBar menu;
    private javax.swing.JLabel nivelZoom;
    private javax.swing.JMenuItem paraCinza;
    private javax.swing.JMenuItem propriedades;
    private javax.swing.JMenuItem refazer;
    private javax.swing.JMenuItem salvar;
    private javax.swing.JMenuItem salvarComo;
    private javax.swing.JMenuItem segmentar;
    private javax.swing.JLabel textoZoom;
    private javax.swing.JMenuItem waterShed;
    // End of variables declaration//GEN-END:variables
    private int zoom = 100;
    private final ArrayList<PlanarImage> imagens = new ArrayList();
    private final ArrayList<PlanarImage> backup = new ArrayList();
    private PlanarImage imagemVisivel = null;
    private File file = null;
}
